{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setMessage } from \"./message\";\nimport AuthService from \"../../services/authService\";\nconst user = JSON.parse(localStorage.getItem(\"user\"));\nexport const registerAccount = createAsyncThunk(\"auth/registerAccount\", async ({\n  name,\n  email,\n  password\n}, thunkAPI) => {\n  try {\n    const response = await AuthService.registerAccount(name, email, password);\n    thunkAPI.dispatch(setMessage(response.data.message));\n    return response.data;\n  } catch (error) {\n    const message = (await (error.response && error.response.data && error.response.data.message)) || error.message || error.toString();\n    thunkAPI.dispatch(setMessage(message));\n    return thunkAPI.rejectWithValue();\n  }\n});\nexport const login = createAsyncThunk(\"auth/login\", async ({\n  email,\n  password\n}, thunkAPI) => {\n  try {\n    const data = await AuthService.login(email, password);\n    return {\n      user: data\n    };\n  } catch (error) {\n    const message = (await (error.response && error.response.data && error.response.data.message)) || error.message || error.toString();\n    thunkAPI.dispatch(setMessage(message));\n    return thunkAPI.rejectWithValue();\n  }\n});\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n  await AuthService.logout();\n});\nconst initialState = user ? {\n  isLoggedIn: true,\n  hasRegistered: true,\n  user\n} : {\n  isLoggedIn: false,\n  user: null\n};\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  extraReducers: builder => {\n    builder.addCase(registerAccount.pending, state => {\n      state.isLoggedIn = false;\n      state.user = null;\n    }).addCase(registerAccount.fulfilled, state => {\n      state.isLoggedIn = true;\n    }).addCase(registerAccount.rejected, state => {\n      state.isLoggedIn = false;\n    }).addCase(login.pending, state => {\n      state.isLoggedIn = false;\n      state.user = null;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.isLoggedIn = true;\n      state.user = action.payload.user;\n    }).addCase(login.rejected, (state, action) => {\n      state.isLoggedIn = false;\n      state.user = action.payload.user;\n    }).addCase(logout.fulfilled, state => {\n      state.isLoggedIn = false;\n      state.user = null;\n    });\n  }\n});\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","setMessage","AuthService","user","JSON","parse","localStorage","getItem","registerAccount","name","email","password","thunkAPI","response","dispatch","data","message","error","toString","rejectWithValue","login","logout","initialState","isLoggedIn","hasRegistered","authSlice","extraReducers","builder","addCase","pending","state","fulfilled","rejected","action","payload","reducer"],"sources":["/Users/mymac/Dev/php/laravel/hr-management-frontend/src/redux/slices/auth.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport { setMessage } from \"./message\";\nimport AuthService from \"../../services/authService\";\n\nconst user = JSON.parse(localStorage.getItem(\"user\"));\n\nexport const registerAccount = createAsyncThunk(\n    \"auth/registerAccount\",\n    async ({ name, email, password }, thunkAPI) => {\n        try {\n            const response = await AuthService.registerAccount(name, email, password);\n            thunkAPI.dispatch(setMessage(response.data.message));\n            return response.data;\n        } catch (error) {\n            const message =\n                await (error.response &&\n                    error.response.data &&\n                    error.response.data.message) ||\n                    error.message ||\n                    error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const login = createAsyncThunk(\n    \"auth/login\",\n    async ({ email, password }, thunkAPI) => {\n        try {\n            const data = await AuthService.login(email, password);\n            return { user: data };\n        } catch (error) {\n            const message =\n                await (error.response &&\n                error.response.data &&\n                error.response.data.message) ||\n                error.message ||\n                error.toString();\n            thunkAPI.dispatch(setMessage(message));\n            return thunkAPI.rejectWithValue();\n        }\n    }\n);\n\nexport const logout = createAsyncThunk(\"auth/logout\", async () => {\n    await AuthService.logout();\n});\n\nconst initialState = user ? \n                    { \n                        isLoggedIn: true, \n                        hasRegistered: true,\n                        user\n                    } \n                    : \n                    { \n                        isLoggedIn: false, \n                        user: null\n                    };\n \nconst authSlice = createSlice({\n    name: \"auth\",\n    initialState,\n    extraReducers: (builder) => {\n        builder\n            .addCase(registerAccount.pending, (state) => {\n                state.isLoggedIn = false;\n                state.user = null;\n            })\n            .addCase(registerAccount.fulfilled, (state) => {\n                state.isLoggedIn = true;\n            })\n            .addCase(registerAccount.rejected, (state) => {\n                state.isLoggedIn = false;\n            })\n            .addCase(login.pending, (state) => {\n                state.isLoggedIn = false;\n                state.user = null;\n            })\n            .addCase(login.fulfilled, (state, action) => {\n                state.isLoggedIn = true;\n                state.user = action.payload.user;\n            })\n            .addCase(login.rejected, (state, action) => {\n                state.isLoggedIn = false;\n                state.user = action.payload.user;\n            })\n            .addCase(logout.fulfilled, (state) => {\n                state.isLoggedIn = false;\n                state.user = null;\n            })\n    },\n});\n\nexport default authSlice.reducer;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}